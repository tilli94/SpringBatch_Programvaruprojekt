#  H2 Database configuration
server:
  port: 9090

#  Configuration in order to connect with the H2 database
spring:
  h2:
    console:
      enabled: true
      path: /h2-console
      #settings:
        #web-allow-others: true
  datasource:
    driverClassName: org.h2.Driver
    username: sa
    password:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    initalization-mode: always
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    show-sql: false # "true" will show hibernates sql queries
    properties:
      hibernate:
        format_sql: true
        ddl:
          auto: create

#sql:
 #init:
   #mode: always


#  Gives more detailed logs.
logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
        #SQL: DEBUG


#jpa:
  #  Defers the initialization of the datasource until after JPA has started.
  #  This is useful when using database initialization scripts with JPA, since
  #  these scripts often require the database to be in a certain state before they can run successfully.
  #defer-datasource-initialization: true

#batch:
  #jdbc:
    #  Initializes the database schema every time the application starts. This is useful for
    #  development and testing environments where you may want to reset the database to a known state at startup.
    #initialize-schema: always
    #  Sets the prefix for all Spring Batch metadata tables. By default, Spring Batch creates its own set of
    #  tables to store job execution data. The prefix "BATCH_" will be added to all these table names.
    #table-prefix: BATCH_
    #  Specifies the location of the SQL script used to initialize the schema of the database.
    #schema: classpath:org/springframework/batch/core/schema.sql

#  Makes it so that the batch jobs doesn't start automatically
#spring:
  #batch:
    #job:
      #enabled: false

#application:
  #schedule:
    #cron: "0 0 0/5 * * * ?"
  #batch:
    #chunkSize: 100
